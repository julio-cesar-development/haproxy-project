version: '3.4'

services:
  haproxy:
    container_name: haproxy
    build:
      context: ./
    environment:
      PROXY_UI_USERNAME: ${PROXY_UI_USERNAME}
      PROXY_UI_PASSWORD: ${PROXY_UI_PASSWORD}
    networks:
      subnet_0:
        ipv4_address: 172.200.10.2
        aliases:
          - proxy
    ports:
      - 8000:80/tcp
      - 8888:8080/tcp
    hostname: proxy
    restart: on-failure
    volumes:
      - ./haproxy.cfg:/tmp/haproxy.cfg
    privileged: true

  api-v1:
    container_name: api-v1
    image: juliocesarmidia/http-simple-api:v1.0.0
    environment:
      API_PORT: 9000
      MESSAGE: "172.200.10.3 API v1"
    expose:
      - 9000/tcp
    networks:
      subnet_0:
        ipv4_address: 172.200.10.3
        aliases:
          - api.v1
    hostname: api-v1
    restart: on-failure

  api-v2:
    container_name: api-v2
    image: juliocesarmidia/http-simple-api:v1.0.0
    environment:
      API_PORT: 9000
      MESSAGE: "172.200.10.4 API v2"
    expose:
      - 9000/tcp
    networks:
      subnet_0:
        ipv4_address: 172.200.10.4
        aliases:
          - api.v2
    hostname: api-v2
    restart: on-failure

  api-v3:
    container_name: api-v3
    image: juliocesarmidia/http-simple-api:v1.0.0
    environment:
      API_PORT: 9000
      MESSAGE: "172.200.10.5 API v3"
    expose:
      - 9000/tcp
    networks:
      subnet_0:
        ipv4_address: 172.200.10.5
        aliases:
          - api.v3
    hostname: api-v3
    restart: on-failure

  api-v4:
    container_name: api-v4
    image: juliocesarmidia/http-simple-api:v1.0.0
    environment:
      API_PORT: 9000
      MESSAGE: "172.200.10.6 API v4"
    expose:
      - 9000/tcp
    networks:
      subnet_0:
        ipv4_address: 172.200.10.6
        aliases:
          - api.v4
    hostname: api-v4
    restart: on-failure

networks:
  subnet_0:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
      - subnet: 172.200.10.0/24

volumes:
  entry-node-modules:
